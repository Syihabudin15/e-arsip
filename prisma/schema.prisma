// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusAction {
  PENDING
  APPROVED
  REJECTED
}

enum ENeedAction {
  DOWNLOAD
  DELETE
}

model Role {
  id         Int    @id @default(autoincrement())
  roleName   String @unique
  permission String @db.Text

  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User[]
}

model User {
  id       Int     @id @default(autoincrement())
  fullname String
  username String  @unique
  password String
  email    String
  photo    String?

  status           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  role             Role               @relation(fields: [roleId], references: [id])
  roleId           Int
  Logs             Logs[]
  PermohonanKredit PermohonanKredit[]
  ReuestMade       PermohonanAction[] @relation("RequesterRelation")
  ApprovMade       PermohonanAction[] @relation("ApproverRelation")

  @@index([roleId])
}

model JenisPemohon {
  id         Int    @id @default(autoincrement())
  name       String @unique
  keterangan String @db.Text

  status           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  PermohonanKredit PermohonanKredit[]
}

model PermohonanKredit {
  id            Int     @id @default(autoincrement())
  fullname      String
  NIK           String?
  purposeUse    String?
  accountNumber String?
  description   String? @db.Text
  activity      String? @db.Text

  status           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  JenisPemohon     JenisPemohon       @relation(fields: [jenisPemohonId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  jenisPemohonId   Int
  userId           Int
  Files            Files[]
  PermohonanAction PermohonanAction[]

  @@index([jenisPemohonId])
  @@index([createdAt])
  @@index([userId])
}

model RootFiles {
  id   Int    @id @default(autoincrement())
  name String @unique

  Files Files[]
}

model Files {
  id            Int    @id @default(autoincrement())
  name          String
  url           String
  allowDownload String @db.Text

  createdAt          DateTime          @default(now())
  RootFiles          RootFiles         @relation(fields: [rootFilesId], references: [id])
  PermohonanKredit   PermohonanKredit? @relation(fields: [permohonanKreditId], references: [id])
  rootFilesId        Int
  permohonanKreditId Int?

  PermohonanAction PermohonanAction[]
}

model PermohonanAction {
  id           Int          @id @default(autoincrement())
  statusAction StatusAction @default(PENDING)
  description  String?      @db.Text
  action       ENeedAction

  status           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  Requester        User             @relation("RequesterRelation", fields: [requesterId], references: [id])
  Approver         User?            @relation("ApproverRelation", fields: [approverId], references: [id])
  PermohonanKredit PermohonanKredit @relation(fields: [permohonanKreditId], references: [id])

  Files Files[] // banyak Files

  requesterId        Int
  approverId         Int?
  permohonanKreditId Int  @default(1)
}

model Logs {
  id           Int     @id @default(autoincrement())
  name         String
  method       String
  table        String
  path         String
  serverIP     String
  userAgent    String?
  sendData     String  @db.Text
  returnStatus String
  detail       String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([userId])
  @@index([createdAt])
}
